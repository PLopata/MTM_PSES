        -:    0:Source:Lib_Calc.c
        -:    0:Graph:UT_Lib_Calc.gcno
        -:    0:Data:UT_Lib_Calc.gcda
        -:    0:Runs:14
        -:    1:/**===================================================================================================================*\
        -:    2:  @file Lib_Calc.c
        -:    3:
        -:    4:  @brief Bibiloteka Lib_Calc - implementacja
        -:    5:  
        -:    6:  Implementacja funkcjonalności podstawowej kalkukatora 4-działaniowego z pamięcią.
        -:    7:
        -:    8:  @see Lib_Calc.pdf
        -:    9:\*====================================================================================================================*/
        -:   10:
        -:   11:/*====================================================================================================================*\
        -:   12:    Załączenie nagłówków
        -:   13:\*====================================================================================================================*/
        -:   14:#include "Lib_Calc.h"
        -:   15:
        -:   16:/*====================================================================================================================*\
        -:   17:    Makra lokalne
        -:   18:\*====================================================================================================================*/
        -:   19:#define MAX32   (2147483647L)
        -:   20:#define MIN32   (-2147483648L)
        -:   21:
        -:   22:/*====================================================================================================================*\
        -:   23:    Typy lokalne
        -:   24:\*====================================================================================================================*/
        -:   25:
        -:   26:/*====================================================================================================================*\
        -:   27:    Zmienne globalne
        -:   28:\*====================================================================================================================*/
        -:   29:
        -:   30:/*====================================================================================================================*\
        -:   31:    Zmienne lokalne (statyczne)
        -:   32:\*====================================================================================================================*/
        -:   33:static sint32 memory_value;     /**< Reprezentacja pamięci kalkulatora [P11] */
        -:   34:
        -:   35:/*====================================================================================================================*\
        -:   36:    Deklaracje funkcji lokalnych
        -:   37:\*====================================================================================================================*/
        -:   38:
        -:   39:/*====================================================================================================================*\
        -:   40:    Kod globalnych funkcji inline i makr funkcyjnych
        -:   41:\*====================================================================================================================*/
        -:   42:
        -:   43:/*====================================================================================================================*\
        -:   44:    Kod funkcji
        -:   45:\*====================================================================================================================*/
        -:   46:
        -:   47:
        -:   48:/**
        -:   49:  @brief Dodawanie
        -:   50:
        -:   51:  Implementacja dodawania liczb 32-bitowych z kontrolą przepełnienia.
        -:   52:  Element projektu: [P2]
        -:   53:*/
        8:   54:Std_ReturnType Lib_Calc_Add(sint32 arg1, sint32 arg2, sint32* result)
        -:   55:{
        8:   56:    sint64 tmp = ((sint64)arg1) + ((sint64)arg2);
        8:   57:    Std_ReturnType ret = E_OK;
        8:   58:    if((tmp > MAX32) || (tmp < MIN32))
        -:   59:    {
        4:   60:        ret = E_NOT_OK;
        -:   61:    }
        8:   62:    *result = (sint32)tmp;
        8:   63:    return ret;
        -:   64:}
        -:   65:
        -:   66:/**
        -:   67:  @brief Odejmowanie
        -:   68:
        -:   69:  Implementacja odejmowania liczb 32-bitowych z kontrolą przepełnienia.
        -:   70:  Element projektu: [P3]
        -:   71:*/
        8:   72:Std_ReturnType Lib_Calc_Sub(sint32 arg1, sint32 arg2, sint32* result)
        -:   73:{
        8:   74:    sint64 tmp = ((sint64)arg1) - ((sint64)arg2);
        8:   75:    Std_ReturnType ret = E_OK;
        8:   76:    if((tmp > MAX32) || (tmp < MIN32))
        -:   77:    {
        4:   78:        ret = E_NOT_OK;
        -:   79:    }
        8:   80:    *result = (sint32)tmp;
        8:   81:    return ret;
        -:   82:}
        -:   83:
        -:   84:/**
        -:   85:  @brief Mnożenie
        -:   86:
        -:   87:  Implementacja mnożenia liczb 32-bitowych z kontrolą przepełnienia.
        -:   88:  Element projektu: [P4]
        -:   89:*/
        8:   90:Std_ReturnType Lib_Calc_Mul(sint32 arg1, sint32 arg2, sint32* result)
        -:   91:{
        8:   92:    sint64 tmp = ((sint64)arg1) * ((sint64)arg2);
        8:   93:    Std_ReturnType ret = E_OK;
        8:   94:    if((tmp > MAX32) || (tmp < MIN32))
        -:   95:    {
        4:   96:        ret = E_NOT_OK;
        -:   97:    }
        8:   98:    *result = (sint32)tmp;
        8:   99:    return ret;
        -:  100:}
        -:  101:  
        -:  102:/**
        -:  103:  @brief Dzielenie
        -:  104:
        -:  105:  Implementacja dzielenia liczb 32-bitowych z kontrolą dzielenia przez 0.
        -:  106:  Element projektu: [P5], [P6], [P7], [P8]
        -:  107:*/
       10:  108:Std_ReturnType Lib_Calc_Div(sint32 arg1, sint32 arg2, sint32* result)
        -:  109:{
       10:  110:    Std_ReturnType ret = E_OK;
       10:  111:    if(arg2 == 0)
        -:  112:    {
        6:  113:        if(arg1 > 0)
        -:  114:        {
        2:  115:            *result = (sint32)MAX32;
        2:  116:            ret = E_NOT_OK;
        -:  117:        }
        4:  118:        else if(arg1 < 0)
        -:  119:        {
        2:  120:            *result = (sint32)MIN32;
        2:  121:            ret = E_NOT_OK;
        -:  122:        }
        -:  123:        else 
        -:  124:        {
        2:  125:            *result = (sint32)0;
        2:  126:            ret = E_NOT_OK;
        -:  127:        }
        -:  128:        
        -:  129:    }
        -:  130:    else
        -:  131:    {
        -:  132:        sint64 tmp;
        4:  133:         tmp = ((sint64)arg1) / ((sint64)arg2);
        4:  134:         *result = (sint32)tmp;
        -:  135:    }
       10:  136:    return ret;
        -:  137:}
        -:  138:
        -:  139:/**
        -:  140:  @brief Zapis do pamięci
        -:  141:
        -:  142:  Implementacja zapisu danej do pamięci
        -:  143:  Element projektu: [P9]
        -:  144:*/
        6:  145:void Lib_Calc_MemS(sint32 mem)
        -:  146:{
        6:  147:    memory_value = mem;
        6:  148:}
        -:  149:
        -:  150:
        -:  151:/**
        -:  152:  @brief Odczyt z pamięci
        -:  153:
        -:  154:  Implementacja odczytu danej z pamięci
        -:  155:  Element projektu: [P10]
        -:  156:*/
        6:  157:sint32 Lib_Calc_MemR(void)
        -:  158:{
        6:  159:    return memory_value;
        -:  160:}
